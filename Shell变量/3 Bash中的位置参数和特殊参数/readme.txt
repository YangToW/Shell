Bash中的位置参数是由除0以外的一个或多个数字表示的参数。
位置参数是当Shell或Shell的函数被引用时由Shell或Shell函数的参数赋值，并且可以使用Bash的内部命令set来重新赋值。位置参数N可以被引用为${N}或$N
位置参数不能通过赋值语句来赋值，而只能通过Bash的内部命令set和shift来设置和取消它们。当Shell函数运行时，位置参数会被临时地替换。

Bash对一些参数的处理比较特殊。这些参数只能被引用，但不能修改它们的值。这些特殊参数分别是*、@、#、?、-、$、!、0和_。

1、特殊参数*,将扩展为从1开始的所有位置参数。如果扩展发生在双引号内，即"$*", 则扩展为包含每个参数值的单词，每个参数值用特殊变量IFS的第一个字符隔离。
   也就是说，"$*"等价于"$1c$2c...", 其中，c是特殊变量IFS的第一个字符。如果变量IFS没有定义，默认用空格分隔。
   可以在终端尝试下述两行命令
   set one two three
   echo "$*"
2、特殊参数@，也将扩展为从1开始的所有位置参数。但当它的扩展发生在双引号内时，每个参数都扩展为分隔的单词。也就是说，"$@"等价于"$1"、"$2"...。
   参数@和*之间的区别将在for循环的调用中显示出来。
   
3、特除参数?，将扩展为最近一个在前台执行的命令的退出状态。可以使用它来检查Shell脚本是否已经成功地执行，通常退出状态0表示命令已经没有任何错误地结束运行。

4、特殊参数-，将扩展为当前的选项标志。这些选项是在调用时，或由内部命令set指定，或由Shell自身指定。

5、特殊参数$，将扩展为当前Shell的进程号。在一个子Shell中，它扩展为调用Shell的进程号，而不是子Shell的进程号。

6、特殊参数!，将扩展为最近一个执行的后台命令的进程号，可以在终端尝试下述两行命令
   sleep 10&
   echo $!
   
7、特殊参数0，将扩展为Shell或Shell脚本的名称。

8、特殊参数_，在Shell启动时，它被设为开始运行的Shell或Shell脚本的路径。随后拓展为前一个命令的最后一个参数。(详情见param_underscore.sh)

使用declate指定变量的类型
